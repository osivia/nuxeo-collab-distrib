<#escape x as x?xml>
<?xml version="1.0"?>
<component name="cartographie.nationale.elasticsearch.contrib">

  <require>org.nuxeo.elasticsearch.ElasticSearchComponent</require>

<#if "${elasticsearch.addressList}" == "">
  <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent"
    point="elasticSearchLocal">
    <elasticSearchLocal
      clusterName="${elasticsearch.clusterName}"
      nodeName="${elasticsearch.nodeName}"
      pathData="${nuxeo.data.dir}/elasticsearch"
      pathLogs="${nuxeo.log.dir}/elasticsearch"
      httpEnabled="${elasticsearch.httpEnabled}" />
  </extension>
<#else>
  <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent"
    point="elasticSearchRemote">
    <elasticSearchRemote
      clusterName="${elasticsearch.clusterName}"
      addressList="${elasticsearch.addressList}"
      clientTransportSniff="false"
      clientTransportIgnoreClusterName="false"
      clientTransportPingTimeout="5s"
      clientTransportNodesSamplerInterval="5s" />
  </extension>
</#if>

  <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent"
    point="elasticSearchIndex">
    <elasticSearchIndex name="${elasticsearch.indexName}" type="doc" repository="default">
      <fetchFromSource>
        <include>ecm:*</include>
        <include>dc:*</include>
        <include>common:*</include>
        <include>note:*</include>
        <include>webc:*</include>
        <include>ttc:*</include>
        <include>ttcn:*</include>
        <include>rg:*</include>
        <include>annonce:*</include>
        <include>unum:*</include>
        <include>acrp:*</include>
        <include>bape:*</include>
        <include>etb:*</include>
        <include>dun:*</include>
        <include>unula:*</include>
        <include>files:*</include>
        <include>lk:*</include>
        <include>vevent:*</include>
        <include>zoom:*</include>
        
        <exclude>ecm:binarytext</exclude>
      </fetchFromSource>

      <settings>
{
<#if "${elasticsearch.addressList}" != "">
   "number_of_shards" : "${elasticsearch.indexNumberOfShards}",
   "number_of_replicas" : "${elasticsearch.indexNumberOfReplicas}",
</#if>
   "analysis" : {
      "filter" : {
         "truncate_filter" : {
            "length" : 256,
            "type" : "truncate"
         },
         "en_stem_filter" : {
            "name" : "minimal_english",
            "type" : "stemmer"
         },
         "en_stop_filter" : {
            "stopwords" : [
               "_english_"
            ],
            "type" : "stop"
         },
         "fr_elision_filter" : {
            "articles" : [
               "c",
               "l",
               "m",
               "t",
               "qu",
               "n",
               "s",
               "j"
            ],
            "type" : "elision"
         },
         "fr_stem_filter" : {
            "name" : "minimal_french",
            "type" : "stemmer"
         },
         "fr_stop_filter" : {
            "stopwords" : [
               "_french_"
            ],
            "type" : "stop"
         }
      },
      "tokenizer" : {
         "path_tokenizer" : {
            "delimiter" : "/",
            "type" : "path_hierarchy"
         }
      },
      "analyzer" : {
         "en_analyzer" : {
            "filter" : [
               "lowercase",
               "en_stop_filter",
               "en_stem_filter",
               "asciifolding"
            ],
            "type" : "custom",
            "tokenizer" : "standard"
         },
         "fr_analyzer" : {
            "alias" : "fulltext",
            "filter" : [
               "lowercase",
               "fr_stop_filter",
               "fr_stem_filter",
               "asciifolding",
               "fr_elision_filter"
            ],
            "type" : "custom",
            "tokenizer" : "standard"
         },
         "path_analyzer" : {
            "type" : "custom",
            "tokenizer" : "path_tokenizer"
         },
         "lowercase_analyzer" : {
            "type" : "custom",
            "filter" : [ "truncate_filter", "lowercase", "asciifolding" ],
            "tokenizer" : "keyword"
         },
         "default" : {
            "type" : "custom",
            "filter" : [ "truncate_filter" ],
            "tokenizer" : "keyword"
         }
      }
   }
}
      </settings>
      <mapping>
{
   "_size" : {
      "enabled" : true
   },
   "_all" : {
      "analyzer" : "fulltext"
   },
   "properties" : {
      "dc:title" : {
         "type" : "multi_field",
         "fields" : {
           "dc:title" : {
             "index" : "analyzed",
             "type" : "string"
           },
           "fulltext" : {
             "boost": 2,
             "type": "string",
             "analyzer" : "fulltext"
          }
        }
      },
      "dc:description" : {
         "type" : "multi_field",
         "fields" : {
           "dc:description" : {
             "index" : "analyzed",
             "include_in_all" : true,
             "type" : "string"
           },
           "fulltext" : {
             "boost": 1.5,
             "type": "string",
             "analyzer" : "fulltext"
          }
        }
      },
      "note:note" : {
         "type" : "multi_field",
         "fields" : {
           "note:note" : {
             "index" : "no",
             "include_in_all" : "true",
             "type" : "string"
           },
           "fulltext" : {
             "type": "string",
             "analyzer" : "fulltext"
          }
        }
      },
      "webp:content" : {
         "type" : "multi_field",
         "fields" : {
           "webp:content" : {
             "index" : "no",
             "include_in_all" : "true",
             "type" : "string"
           },
           "fulltext" : {
             "type": "string",
             "analyzer" : "fulltext"
          } 
        }
      },
      "webc:welcomeText" : {
         "type" : "multi_field",
         "fields" : {
           "webc:welcomeText" : {
             "index" : "no",
             "include_in_all" : "true",
             "type" : "string"
           },
           "fulltext" : {
             "type": "string",
             "analyzer" : "fulltext"
          } 
        }
      },
      "comment:comment" : {
         "type" : "multi_field",
         "fields" : {
           "comment:comment" : {
             "index" : "analyzed",
             "include_in_all" : true,
             "type" : "string"
           },
           "fulltext" : {
             "type": "string",
             "analyzer" : "fulltext"
          } 
        }
      },
      "mail:mail" : {
         "type" : "multi_field",
         "fields" : {
           "mail:mail" : {
             "index" : "no",
             "include_in_all" : "true",
             "type" : "string"
           },
           "fulltext" : {
             "type": "string",
             "analyzer" : "fulltext"
          } 
        }
      },
      "ecm:binarytext" : {
         "type" : "string",
         "index" : "no",
         "include_in_all" : true
      },
      "unum:scenario" : {
         "type" : "multi_field",
         "fields" : {
           "unum:scenario" : {
             "index" : "no",
             "include_in_all" : "true",
             "type" : "string"
           },
           "fulltext" : {
             "type": "string",
             "analyzer" : "fulltext"
          }
        }
      },
      "ecm:path" : {
         "type" : "multi_field",
         "fields" : {
            "children" : {
               "search_analyzer" : "keyword",
               "index_analyzer" : "path_analyzer",
               "type" : "string"
            },
            "ecm:path" : {
               "index" : "not_analyzed",
               "type" : "string"
            }
         }
      },
      "ecm:pos": {
         "type": "integer"
      },
      "ttc:tabOrder": {
         "type": "integer"
      },
      "dc:created": {
         "format": "dateOptionalTime",
        "type": "date"
      },
      "dc:modified": {
         "format": "dateOptionalTime",
        "type": "date"
      },
      "ttc:webid" : {
         "type" : "string",
         "index" : "not_analyzed"
      },
      "common:icon": {
         "type": "string",
         "index" : "no",
         "include_in_all" : false
      },
      "etb:postalCode" : {
         "type" : "integer"
      },
      "etb:ENTOrganisationGeoLoc" : {
         "type" : "double"
      }
   }
}
      </mapping>

    </elasticSearchIndex>
  </extension>

</component>
</#escape>

